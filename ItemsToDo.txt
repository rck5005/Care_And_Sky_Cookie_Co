TO DO BEFORE FINAL 

REQUIREMENTS:
user remove from favorites


lists.jsx line 193.
--currently creations/all/ "add to favorites" button doesn't display correctly, but you can add to favorites
-----issue is cookiecreation doesn't have "is_favorite", will need to 
-----compare each creation with the creations in the users "favorites" table and 
-----rander the button that way.  

BACK END

VALIDATIONS:

--models.py for: cookie_creation, cookie_cutter, deocration, flavor, topping, user_app

--views.py for: user_app, cookie_cutter_app, flavor_app, decoration_app, topping_app, user_cookie_creation
----user_cookie_creation(adjustfavorites, delete, if it's already deleted)


user can create user_cookie_creation
user_cookie_creation saves to cookie creation, but is automatically private
only way to make public is if the cookie creation was previously purchased

STRETCH GOAL: keep track of how many times the cookie was purchased


FRONT END 

when user changes a creation from Favorite to Not Favorite, will need to identify if we should
remove the creation from users_cookie_creation views.py as well.
--perhaps ask the user if they'd also like to remove it from their creations?  and if so, then remove it
--and if it also has a "prev_purchased" of negative, then delete it from cookie creations also

addremoveCreation.  going to be difficult. add another button to items only in "MyCookieCreations"
--option to either remove from list (if previously sold) or 
--permanently delete (if it's user's creation)

Confirmation for Delete Account before deleting

DOWN THE ROAD: Handle all possible HTTP responses from the back end to front end.. right now just handling what is supposed to happen.

notify user when removing a variation from their potential creation, right now it just disappears

separate update username, address, and password:
--currently, when updating username, address or password it will try to update all three.
----AccountPage.jsx, utilities.jsx, user_app.views.py, user_app.urls

possibly to mailchimp views for subscribe to introduce serializerclass Subscribe(TokenReq):
    def post(self, request):
        email = request.data.get('email')
        first_name = request.data.get('first_name')
        last_name = request.data.get('last_name')
        
        if not email:
            return Response({"error": "Email is required"}, status=400)
        
        mailchimp_service = MailchimpService()
        result = mailchimp_service.add_member_to_list(email, first_name, last_name)
        
        # Assuming the user is authenticated and you want to include their details in the response
        user = request.user
        user_serializer = UserSerializer(user)
        
        if result:
            return Response({
                "message": "Successfully subscribed",
                "user": user_serializer.data
            }, status=200)
        else:
            return Response({"error": "Failed to subscribe"}, status=400)






ITEMS COMPLETED:
user delete a user_cookie_creation
--previously purchased
--not previously purchased

save a users creation so if they refresh the page we don't lose the state


just created a serializer for user while i was creating urls and views for user_cookie_creation.
might have to go back and change the user views since I didn't use a serializer for it. 